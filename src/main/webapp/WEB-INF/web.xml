<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">


    <!--
     基于XML配置的方式编写Servlet
        1. 配置servlet标签和servlet-mapping标签
        2. servlet标签的servlet-name必须和servlet-mapping标签的servlet-name一致


        -->


    <servlet>
        <!--        servlet-name的名字一般都是Servlet类名的首字母小写，例如HelloWorldServlet->helloWorldServlet -->
        <servlet-name>helloWorldServlet</servlet-name>
        <!--       配置 Servlet的全路径名-->
        <servlet-class>net.ittimeline.java.web.foundational.servlet.HelloWorldServlet</servlet-class>

        <!--        配置Servlet的初始化参数-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>applicationContext.xml</param-value>
        </init-param>
        <!--        服务器启动的时候创建Servlet对象 启动项的数值越小，优先级就越高-->
        <load-on-startup>1</load-on-startup>


    </servlet>

    <servlet-mapping>
        <servlet-name>helloWorldServlet</servlet-name>
        <!--        配置客户端访问的映射路径,目前必须以/开头-->
        <url-pattern>/helloworld</url-pattern>
    </servlet-mapping>

    <!-- 图形验证码servlet -->
    <servlet>
        <servlet-name>CaptchaServlet</servlet-name>
        <servlet-class>com.wf.captcha.servlet.CaptchaServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CaptchaServlet</servlet-name>
        <url-pattern>/captcha</url-pattern>
    </servlet-mapping>


    <!--
        采用XML配置的方式配置Filter

        首先会根据filter-mapping的url-pattern对应的路径拦截客户端请求，然后根据filter-mapping的filter-name
        找到相同的filter的filter-name，然后会执行filter-class对应的LoginFilter的
        doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 方法
    -->

    <filter>
        <filter-name>loginFilter</filter-name>
        <filter-class>net.ittimeline.java.web.foundational.filter.LoginFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>loginFilter</filter-name>
        <url-pattern>/login</url-pattern>
    </filter-mapping>



    <!--
        使用XML的配置方式配置监听器
    -->
    <listener>
        <listener-class>net.ittimeline.java.web.foundational.listener.ContextLoaderListener</listener-class>
    </listener>

    <mime-mapping>
        <extension>htm</extension>
        <mime-type>text/html;charset=utf-8</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>html</extension>
        <mime-type>text/html;charset=utf-8</mime-type>
    </mime-mapping>



</web-app>
